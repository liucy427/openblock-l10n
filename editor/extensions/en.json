{
    "arduinoEsp32.InterrupModeMenu.changeEdge": "change edge",
    "arduinoEsp32.InterrupModeMenu.fallingEdge": "falling edge",
    "arduinoEsp32.InterrupModeMenu.high": "high",
    "arduinoEsp32.InterrupModeMenu.low": "low",
    "arduinoEsp32.InterrupModeMenu.risingEdge": "rising edge",
    "arduinoEsp32.category.data": "Data",
    "arduinoEsp32.category.sensor": "Sensor",
    "arduinoEsp32.category.serial": "Serial",
    "arduinoEsp32.data.dataConstrain": "constrain [DATA] between ([ARG0], [ARG1])",
    "arduinoEsp32.data.dataConvert": "convert [DATA] to [TYPE]",
    "arduinoEsp32.data.dataConvertASCIICharacter": "convert [DATA] to ASCII character",
    "arduinoEsp32.data.dataConvertASCIINumber": "convert [DATA] to ASCII nubmer",
    "arduinoEsp32.data.dataMap": "map [DATA] from ([ARG0], [ARG1]) to ([ARG2], [ARG3])",
    "arduinoEsp32.dataTypeMenu.decimal": "decimal",
    "arduinoEsp32.dataTypeMenu.integer": "integer",
    "arduinoEsp32.dataTypeMenu.string": "string",
    "arduinoEsp32.eolMenu.noWarp": "no-warp",
    "arduinoEsp32.eolMenu.warp": "warp",
    "arduinoEsp32.levelMenu.high": "high",
    "arduinoEsp32.levelMenu.low": "low",
    "arduinoEsp32.modeMenu.input": "input",
    "arduinoEsp32.modeMenu.inputPullup": "input-pullup",
    "arduinoEsp32.modeMenu.output": "output",
    "arduinoEsp32.pins.esp32AttachInterrupt": "attach interrupt pin [PIN] mode [MODE] executes",
    "arduinoEsp32.pins.esp32DetachInterrupt": "detach interrupt pin [PIN]",
    "arduinoEsp32.pins.esp32ReadTouchPin": "read touch pin [PIN]",
    "arduinoEsp32.pins.readAnalogPin": "read analog pin [PIN]",
    "arduinoEsp32.pins.readDigitalPin": "read digital pin [PIN]",
    "arduinoEsp32.pins.setServoOutput": "set servo pin [PIN] use channel [CH] out [OUT]",
    "arduinoEsp32.sensor.readHallSensor": "read hall sensor",
    "arduinoEsp32.sensor.runningTime": "running time (millis)",
    "arduinoEsp32.serial.multiSerialAvailable": "serial [NO] available data length",
    "arduinoEsp32.serial.multiSerialBegin": "serial [NO] begin baudrate [VALUE]",
    "arduinoEsp32.serial.multiSerialPrint": "serial [NO] print [VALUE] [EOL]",
    "arduinoEsp32.serial.multiSerialReadAByte": "serial [NO] read a byte",
    "arduinoLeonardo.category.data": "Data",
    "arduinoLeonardo.category.pins": "Pins",
    "arduinoLeonardo.data.dataConstrain": "constrain [DATA] between ([ARG0], [ARG1])",
    "arduinoLeonardo.data.dataConvert": "convert [DATA] to [TYPE]",
    "arduinoLeonardo.data.dataConvertASCIICharacter": "convert [DATA] to ASCII character",
    "arduinoLeonardo.data.dataConvertASCIINumber": "convert [DATA] to ASCII nubmer",
    "arduinoLeonardo.data.dataMap": "map [DATA] from ([ARG0], [ARG1]) to ([ARG2], [ARG3])",
    "arduinoLeonardo.dataTypeMenu.decimal": "decimal",
    "arduinoLeonardo.dataTypeMenu.integer": "integer",
    "arduinoLeonardo.dataTypeMenu.string": "string",
    "arduinoLeonardo.levelMenu.high": "high",
    "arduinoLeonardo.levelMenu.low": "low",
    "arduinoLeonardo.modeMenu.input": "input",
    "arduinoLeonardo.modeMenu.inputPullup": "input-pullup",
    "arduinoLeonardo.modeMenu.output": "output",
    "arduinoLeonardo.pins.attachInterrupt": "attach interrupt pin [PIN] mode [MODE] executes",
    "arduinoLeonardo.pins.detachInterrupt": "detach interrupt pin [PIN]",
    "arduinoLeonardo.pins.readAnalogPin": "read analog pin [PIN]",
    "arduinoLeonardo.pins.readDigitalPin": "read digital pin [PIN]",
    "arduinoLeonardo.pins.setDigitalOutput": "set digital pin [PIN] out [LEVEL]",
    "arduinoLeonardo.pins.setPinMode": "set pin [PIN] mode [MODE]",
    "arduinoLeonardo.pins.setPwmOutput": "set pwm pin [PIN] out [OUT]",
    "arduinoLeonardo.pins.setServoOutput": "set servo pin [PIN] out [OUT]",
    "arduinoMega2560.category.data": "Data",
    "arduinoMega2560.category.pins": "Pins",
    "arduinoMega2560.category.serial": "Serial",
    "arduinoMega2560.data.dataConstrain": "constrain [DATA] between ([ARG0], [ARG1])",
    "arduinoMega2560.data.dataConvert": "convert [DATA] to [TYPE]",
    "arduinoMega2560.data.dataConvertASCIICharacter": "convert [DATA] to ASCII character",
    "arduinoMega2560.data.dataConvertASCIINumber": "convert [DATA] to ASCII nubmer",
    "arduinoMega2560.data.dataMap": "map [DATA] from ([ARG0], [ARG1]) to ([ARG2], [ARG3])",
    "arduinoMega2560.dataTypeMenu.decimal": "decimal",
    "arduinoMega2560.dataTypeMenu.integer": "integer",
    "arduinoMega2560.dataTypeMenu.string": "string",
    "arduinoMega2560.levelMenu.high": "high",
    "arduinoMega2560.levelMenu.low": "low",
    "arduinoMega2560.modeMenu.input": "input",
    "arduinoMega2560.modeMenu.inputPullup": "input-pullup",
    "arduinoMega2560.modeMenu.output": "output",
    "arduinoMega2560.pins.attachInterrupt": "attach interrupt pin [PIN] mode [MODE] executes",
    "arduinoMega2560.pins.detachInterrupt": "detach interrupt pin [PIN]",
    "arduinoMega2560.pins.readAnalogPin": "read analog pin [PIN]",
    "arduinoMega2560.pins.readDigitalPin": "read digital pin [PIN]",
    "arduinoMega2560.pins.setDigitalOutput": "set digital pin [PIN] out [LEVEL]",
    "arduinoMega2560.pins.setPinMode": "set pin [PIN] mode [MODE]",
    "arduinoMega2560.pins.setPwmOutput": "set pwm pin [PIN] out [OUT]",
    "arduinoMega2560.pins.setServoOutput": "set servo pin [PIN] out [OUT]",
    "arduinoMega2560.serial.multiSerialAvailable": "serial [NO] available data length",
    "arduinoMega2560.serial.multiSerialBegin": "serial [NO] begin baudrate [VALUE]",
    "arduinoMega2560.serial.multiSerialPrint": "serial [NO] print [VALUE] [EOL]",
    "arduinoMega2560.serial.multiSerialReadAByte": "serial [NO] read a byte",
    "arduinoPeripheral.connection.connectFirmataTimeout": "Timeout when try to connect firmata, please download the firmware first",
    "arduinoUno.InterrupModeMenu.changeEdge": "change edge",
    "arduinoUno.InterrupModeMenu.fallingEdge": "falling edge",
    "arduinoUno.InterrupModeMenu.low": "low",
    "arduinoUno.InterrupModeMenu.risingEdge": "rising edge",
    "arduinoUno.category.data": "Data",
    "arduinoUno.category.pins": "Pins",
    "arduinoUno.category.serial": "Serial",
    "arduinoUno.data.dataConstrain": "constrain [DATA] between ([ARG0], [ARG1])",
    "arduinoUno.data.dataConvert": "convert [DATA] to [TYPE]",
    "arduinoUno.data.dataConvertASCIICharacter": "convert [DATA] to ASCII character",
    "arduinoUno.data.dataConvertASCIINumber": "convert [DATA] to ASCII nubmer",
    "arduinoUno.data.dataMap": "map [DATA] from ([ARG0], [ARG1]) to ([ARG2], [ARG3])",
    "arduinoUno.dataTypeMenu.decimal": "decimal",
    "arduinoUno.dataTypeMenu.integer": "integer",
    "arduinoUno.dataTypeMenu.string": "string",
    "arduinoUno.eolMenu.noWarp": "no-warp",
    "arduinoUno.eolMenu.warp": "warp",
    "arduinoUno.levelMenu.high": "high",
    "arduinoUno.levelMenu.low": "low",
    "arduinoUno.modeMenu.input": "input",
    "arduinoUno.modeMenu.inputPullup": "input-pullup",
    "arduinoUno.modeMenu.output": "output",
    "arduinoUno.pins.attachInterrupt": "attach interrupt pin [PIN] mode [MODE] executes",
    "arduinoUno.pins.detachInterrupt": "detach interrupt pin [PIN]",
    "arduinoUno.pins.esp8266AttachInterrupt": "attach interrupt pin [PIN] mode [MODE] executes",
    "arduinoUno.pins.readAnalogPin": "read analog pin [PIN]",
    "arduinoUno.pins.readDigitalPin": "read digital pin [PIN]",
    "arduinoUno.pins.setDigitalOutput": "set digital pin [PIN] out [LEVEL]",
    "arduinoUno.pins.setPinMode": "set pin [PIN] mode [MODE]",
    "arduinoUno.pins.setPwmOutput": "set pwm pin [PIN] out [OUT]",
    "arduinoUno.pins.setServoOutput": "set servo pin [PIN] out [OUT]",
    "arduinoUno.serial.serialAvailable": "serial available data length",
    "arduinoUno.serial.serialBegin": "serial begin baudrate [VALUE]",
    "arduinoUno.serial.serialPrint": "serial print [VALUE] [EOL]",
    "arduinoUno.serial.serialReadData": "serial read data",
    "boost.color.any": "any color",
    "boost.color.black": "black",
    "boost.color.blue": "blue",
    "boost.color.green": "green",
    "boost.color.red": "red",
    "boost.color.white": "white",
    "boost.color.yellow": "yellow",
    "boost.getMotorPosition": "motor [MOTOR_REPORTER_ID] position",
    "boost.getTiltAngle": "tilt angle [TILT_DIRECTION]",
    "boost.motorDirection.backward": "that way",
    "boost.motorDirection.forward": "this way",
    "boost.motorDirection.reverse": "reverse",
    "boost.motorOff": "turn motor [MOTOR_ID] off",
    "boost.motorOn": "turn motor [MOTOR_ID] on",
    "boost.motorOnFor": "turn motor [MOTOR_ID] for [DURATION] seconds",
    "boost.motorOnForRotation": "turn motor [MOTOR_ID] for [ROTATION] rotations",
    "boost.seeingColor": "seeing [COLOR] brick?",
    "boost.setLightHue": "set light color to [HUE]",
    "boost.setMotorDirection": "set motor [MOTOR_ID] direction [MOTOR_DIRECTION]",
    "boost.setMotorPower": "set motor [MOTOR_ID] speed to [POWER] %",
    "boost.tiltDirection.any": "any",
    "boost.tiltDirection.down": "down",
    "boost.tiltDirection.left": "left",
    "boost.tiltDirection.right": "right",
    "boost.tiltDirection.up": "up",
    "boost.whenColor": "when [COLOR] brick seen",
    "boost.whenTilted": "when tilted [TILT_DIRECTION_ANY]",
    "esp32Arduino.category.pins": "Pins",
    "esp32Arduino.pins.esp32SetDACOutput": "set dac pin [PIN] out [OUT]",
    "esp32Arduino.pins.esp32SetPwmOutput": "set pwm pin [PIN] use channel [CH] out [OUT]",
    "esp32Arduino.pins.setDigitalOutput": "set digital pin [PIN] out [LEVEL]",
    "esp32Arduino.pins.setPinMode": "set pin [PIN] mode [MODE]",
    "ev3.beepNote": "beep note [NOTE] for [TIME] secs",
    "ev3.buttonPressed": "button [PORT] pressed?",
    "ev3.getBrightness": "brightness",
    "ev3.getDistance": "distance",
    "ev3.getMotorPosition": "motor [PORT] position",
    "ev3.motorSetPower": "motor [PORT] set power [POWER] %",
    "ev3.motorTurnClockwise": "motor [PORT] turn this way for [TIME] seconds",
    "ev3.motorTurnCounterClockwise": "motor [PORT] turn that way for [TIME] seconds",
    "ev3.whenBrightnessLessThan": "when brightness < [DISTANCE]",
    "ev3.whenButtonPressed": "when button [PORT] pressed",
    "ev3.whenDistanceLessThan": "when distance < [DISTANCE]",
    "gdxfor.getAcceleration": "acceleration [DIRECTION]",
    "gdxfor.getForce": "force",
    "gdxfor.getSpin": "spin speed [DIRECTION]",
    "gdxfor.getTilt": "tilt angle [TILT]",
    "gdxfor.isFreeFalling": "falling?",
    "gdxfor.isTilted": "tilted [TILT]?",
    "gdxfor.pulled": "pulled",
    "gdxfor.pushed": "pushed",
    "gdxfor.shaken": "shaken",
    "gdxfor.startedFalling": "started falling",
    "gdxfor.tiltDirectionMenu.any": "any",
    "gdxfor.tiltDirectionMenu.back": "back",
    "gdxfor.tiltDirectionMenu.front": "front",
    "gdxfor.tiltDirectionMenu.left": "left",
    "gdxfor.tiltDirectionMenu.right": "right",
    "gdxfor.turnedFaceDown": "turned face down",
    "gdxfor.turnedFaceUp": "turned face up",
    "gdxfor.whenForcePushedOrPulled": "when force sensor [PUSH_PULL]",
    "gdxfor.whenGesture": "when [GESTURE]",
    "gdxfor.whenTilted": "when tilted [TILT]",
    "makeymakey.downArrow": "down arrow",
    "makeymakey.downArrowShort": "down",
    "makeymakey.leftArrow": "left arrow",
    "makeymakey.leftArrowShort": "left",
    "makeymakey.rightArrow": "right arrow",
    "makeymakey.rightArrowShort": "right",
    "makeymakey.spaceKey": "space",
    "makeymakey.upArrow": "up arrow",
    "makeymakey.upArrowShort": "up",
    "makeymakey.whenKeyPressed": "when [KEY] key pressed",
    "makeymakey.whenKeysPressedInOrder": "when [SEQUENCE] pressed in order",
    "microbit.axisMenu.xAxis": "x-axis",
    "microbit.axisMenu.yAxis": "y-axis",
    "microbit.axisMenu.zAxis": "z-axis",
    "microbit.buttonsMenu.any": "any",
    "microbit.category.console": "Console",
    "microbit.category.display": "Display",
    "microbit.category.pins": "Pins",
    "microbit.category.sensor": "Sensor",
    "microbit.category.wireless": "Wireless",
    "microbit.clearDisplay": "clear display",
    "microbit.console.consolePrint": "print [TEXT]",
    "microbit.defaultTextToDisplay": "Hello!",
    "microbit.display.clearDisplay": "clear screen",
    "microbit.display.lightPixelAt": "light [STATE] at the x: [X] axis, y: [Y] axis",
    "microbit.display.show": "show [TEXT]",
    "microbit.display.showImage": "show image [VALUE]",
    "microbit.display.showImageUntil": "show image [VALUE] for [TIME] secs",
    "microbit.display.showOnPiexlbrightness": "show on the x: [X] axis, y: [Y] axis with brightness [BRT]",
    "microbit.display.showUntilScrollDone": "show [TEXT] until scroll done",
    "microbit.displaySymbol": "display [MATRIX]",
    "microbit.displayText": "display text [TEXT]",
    "microbit.gestruesMenu.faceDown": "face down",
    "microbit.gestruesMenu.faceUp": "face up",
    "microbit.gestruesMenu.freefall": "freefall",
    "microbit.gestruesMenu.shaken": "shaken",
    "microbit.gestruesMenu.tiltedDownward": "tilted downward",
    "microbit.gestruesMenu.tiltedLeftward": "tilted leftward",
    "microbit.gestruesMenu.tiltedRightward": "tilted rightward",
    "microbit.gestruesMenu.tiltedUpward": "tilted upward",
    "microbit.gesturesMenu.jumped": "jumped",
    "microbit.gesturesMenu.moved": "moved",
    "microbit.gesturesMenu.shaken": "shaken",
    "microbit.isButtonPressed": "[BTN] button pressed?",
    "microbit.isTilted": "tilted [DIRECTION]?",
    "microbit.ledState.off": "off",
    "microbit.ledState.on": "on",
    "microbit.levelMenu.high": "high",
    "microbit.levelMenu.low": "low",
    "microbit.pinStateMenu.off": "off",
    "microbit.pinStateMenu.on": "on",
    "microbit.pins.pinIsTouched": "pin [PIN] is touched",
    "microbit.pins.readAnalogPin": "read analog pin [PIN]",
    "microbit.pins.readDigitalPin": "read digital pin [PIN]",
    "microbit.pins.setDigitalOutput": "set digital pin [PIN] out [LEVEL]",
    "microbit.pins.setPwmOutput": "set pwm pin [PIN] out [OUT]",
    "microbit.sensor.axisAcceleration": "[AXIS] axis acceleration",
    "microbit.sensor.buttonIsPressed": "[KEY] button is pressed?",
    "microbit.sensor.calibrateCompass": "calibrate compass",
    "microbit.sensor.compassAngle": "compass angle",
    "microbit.sensor.compassMagneticDensity": "compass magnetic density",
    "microbit.sensor.gestureIsX": "gestrue is [STA]?",
    "microbit.sensor.lightLevel": "light level",
    "microbit.sensor.runningTime": "running time",
    "microbit.sensor.temperature": "temperature",
    "microbit.tiltAngle": "tilt angle [DIRECTION]",
    "microbit.tiltDirectionMenu.any": "any",
    "microbit.tiltDirectionMenu.back": "back",
    "microbit.tiltDirectionMenu.front": "front",
    "microbit.tiltDirectionMenu.left": "left",
    "microbit.tiltDirectionMenu.right": "right",
    "microbit.whenButtonPressed": "when [BTN] button pressed",
    "microbit.whenGesture": "when [GESTURE]",
    "microbit.whenPinConnected": "when pin [PIN] connected",
    "microbit.whenTilted": "when tilted [DIRECTION]",
    "microbit.wireless.closeWirelessCommunication": "close wireless communication",
    "microbit.wireless.openWirelessCommunication": "open wireless communication",
    "microbit.wireless.receiveWirelessMessage": "receive wireless message",
    "microbit.wireless.resetWirelessCommunication": "reset wireless communication",
    "microbit.wireless.sendWirelessMessage": "send wireless message [TEXT]",
    "microbit.wireless.setWirelessCommunicationChannel": "set wireless communication channel as [CH]",
    "music.categoryName": "Music",
    "music.changeTempo": "change tempo by [TEMPO]",
    "music.drumBass": "(2) Bass Drum",
    "music.drumBongo": "(13) Bongo",
    "music.drumCabasa": "(15) Cabasa",
    "music.drumClaves": "(9) Claves",
    "music.drumClosedHiHat": "(6) Closed Hi-Hat",
    "music.drumConga": "(14) Conga",
    "music.drumCowbell": "(11) Cowbell",
    "music.drumCrashCymbal": "(4) Crash Cymbal",
    "music.drumCuica": "(18) Cuica",
    "music.drumGuiro": "(16) Guiro",
    "music.drumHandClap": "(8) Hand Clap",
    "music.drumOpenHiHat": "(5) Open Hi-Hat",
    "music.drumSideStick": "(3) Side Stick",
    "music.drumSnare": "(1) Snare Drum",
    "music.drumTambourine": "(7) Tambourine",
    "music.drumTriangle": "(12) Triangle",
    "music.drumVibraslap": "(17) Vibraslap",
    "music.drumWoodBlock": "(10) Wood Block",
    "music.getTempo": "tempo",
    "music.instrumentBass": "(6) Bass",
    "music.instrumentBassoon": "(14) Bassoon",
    "music.instrumentCello": "(8) Cello",
    "music.instrumentChoir": "(15) Choir",
    "music.instrumentClarinet": "(10) Clarinet",
    "music.instrumentElectricGuitar": "(5) Electric Guitar",
    "music.instrumentElectricPiano": "(2) Electric Piano",
    "music.instrumentFlute": "(12) Flute",
    "music.instrumentGuitar": "(4) Guitar",
    "music.instrumentMarimba": "(19) Marimba",
    "music.instrumentMusicBox": "(17) Music Box",
    "music.instrumentOrgan": "(3) Organ",
    "music.instrumentPiano": "(1) Piano",
    "music.instrumentPizzicato": "(7) Pizzicato",
    "music.instrumentSaxophone": "(11) Saxophone",
    "music.instrumentSteelDrum": "(18) Steel Drum",
    "music.instrumentSynthLead": "(20) Synth Lead",
    "music.instrumentSynthPad": "(21) Synth Pad",
    "music.instrumentTrombone": "(9) Trombone",
    "music.instrumentVibraphone": "(16) Vibraphone",
    "music.instrumentWoodenFlute": "(13) Wooden Flute",
    "music.midiPlayDrumForBeats": "play drum [DRUM] for [BEATS] beats",
    "music.midiSetInstrument": "set instrument to [INSTRUMENT]",
    "music.playDrumForBeats": "play drum [DRUM] for [BEATS] beats",
    "music.playNoteForBeats": "play note [NOTE] for [BEATS] beats",
    "music.restForBeats": "rest for [BEATS] beats",
    "music.setInstrument": "set instrument to [INSTRUMENT]",
    "music.setTempo": "set tempo to [TEMPO]",
    "pen.categoryName": "Pen",
    "pen.changeColorParam": "change pen [COLOR_PARAM] by [VALUE]",
    "pen.changeHue": "change pen color by [HUE]",
    "pen.changeShade": "change pen shade by [SHADE]",
    "pen.changeSize": "change pen size by [SIZE]",
    "pen.clear": "erase all",
    "pen.colorMenu.brightness": "brightness",
    "pen.colorMenu.color": "color",
    "pen.colorMenu.saturation": "saturation",
    "pen.colorMenu.transparency": "transparency",
    "pen.penDown": "pen down",
    "pen.penUp": "pen up",
    "pen.setColor": "set pen color to [COLOR]",
    "pen.setColorParam": "set pen [COLOR_PARAM] to [VALUE]",
    "pen.setHue": "set pen color to [HUE]",
    "pen.setShade": "set pen shade to [SHADE]",
    "pen.setSize": "set pen size to [SIZE]",
    "pen.stamp": "stamp",
    "speech.defaultWhenIHearValue": "let''s go",
    "speech.extensionName": "Speech to Text",
    "speech.listenAndWait": "listen and wait",
    "speech.speechReporter": "speech",
    "speech.whenIHear": "when I hear [PHRASE]",
    "text2speech.alto": "alto",
    "text2speech.categoryName": "Text to Speech",
    "text2speech.defaultTextToSpeak": "hello",
    "text2speech.giant": "giant",
    "text2speech.kitten": "kitten",
    "text2speech.setLanguageBlock": "set language to [LANGUAGE]",
    "text2speech.setVoiceBlock": "set voice to [VOICE]",
    "text2speech.speakAndWaitBlock": "speak [WORDS]",
    "text2speech.squeak": "squeak",
    "text2speech.tenor": "tenor",
    "translate.categoryName": "Translate",
    "translate.defaultTextToTranslate": "hello",
    "translate.translateBlock": "translate [WORDS] to [LANGUAGE]",
    "translate.viewerLanguage": "language",
    "videoSensing.categoryName": "Video Sensing",
    "videoSensing.direction": "direction",
    "videoSensing.motion": "motion",
    "videoSensing.off": "off",
    "videoSensing.on": "on",
    "videoSensing.onFlipped": "on flipped",
    "videoSensing.setVideoTransparency": "set video transparency to [TRANSPARENCY]",
    "videoSensing.sprite": "sprite",
    "videoSensing.stage": "stage",
    "videoSensing.videoOn": "video [ATTRIBUTE] on [SUBJECT]",
    "videoSensing.videoToggle": "turn video [VIDEO_STATE]",
    "videoSensing.whenMotionGreaterThan": "when video motion > [REFERENCE]",
    "wedo2.getDistance": "distance",
    "wedo2.getTiltAngle": "tilt angle [TILT_DIRECTION]",
    "wedo2.isTilted": "tilted [TILT_DIRECTION_ANY]?",
    "wedo2.motorDirection.backward": "that way",
    "wedo2.motorDirection.forward": "this way",
    "wedo2.motorDirection.reverse": "reverse",
    "wedo2.motorId.a": "motor A",
    "wedo2.motorId.all": "all motors",
    "wedo2.motorId.b": "motor B",
    "wedo2.motorId.default": "motor",
    "wedo2.motorOff": "turn [MOTOR_ID] off",
    "wedo2.motorOn": "turn [MOTOR_ID] on",
    "wedo2.motorOnFor": "turn [MOTOR_ID] on for [DURATION] seconds",
    "wedo2.playNoteFor": "play note [NOTE] for [DURATION] seconds",
    "wedo2.setLightHue": "set light color to [HUE]",
    "wedo2.setMotorDirection": "set [MOTOR_ID] direction to [MOTOR_DIRECTION]",
    "wedo2.startMotorPower": "set [MOTOR_ID] power to [POWER]",
    "wedo2.tiltDirection.any": "any",
    "wedo2.tiltDirection.down": "down",
    "wedo2.tiltDirection.left": "left",
    "wedo2.tiltDirection.right": "right",
    "wedo2.tiltDirection.up": "up",
    "wedo2.whenDistance": "when distance [OP] [REFERENCE]",
    "wedo2.whenTilted": "when tilted [TILT_DIRECTION_ANY]"
}